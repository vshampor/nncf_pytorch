strict digraph  {
"0 /nncf_model_input" [id=0, scope="", type=nncf_model_input];
"1 SymmetricQuantizer/symmetric_quantize" [id=1, scope=SymmetricQuantizer, type=symmetric_quantize];
"2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=2, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=3, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"4 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=4, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"5 LeNet/NNCFConv2d[conv1]/conv2d" [id=5, scope="LeNet/NNCFConv2d[conv1]", type=conv2d];
"6 LeNet/RELU" [id=6, scope=LeNet, type=RELU];
"7 LeNet/SymmetricQuantizer/symmetric_quantize" [id=7, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"8 LeNet/max_pool2d" [id=8, scope=LeNet, type=max_pool2d];
"9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=9, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=10, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"11 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=11, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"12 LeNet/NNCFConv2d[conv2]/conv2d" [id=12, scope="LeNet/NNCFConv2d[conv2]", type=conv2d];
"13 LeNet/RELU" [id=13, scope=LeNet, type=RELU];
"14 LeNet/SymmetricQuantizer/symmetric_quantize" [id=14, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"15 LeNet/max_pool2d" [id=15, scope=LeNet, type=max_pool2d];
"16 LeNet/view" [id=16, scope=LeNet, type=view];
"17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=17, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"18 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=18, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"19 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=19, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"20 LeNet/NNCFLinear[fc1]/linear" [id=20, scope="LeNet/NNCFLinear[fc1]", type=linear];
"21 LeNet/RELU" [id=21, scope=LeNet, type=RELU];
"22 LeNet/SymmetricQuantizer/symmetric_quantize" [id=22, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=23, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"24 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=24, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"25 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=25, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"26 LeNet/NNCFLinear[fc2]/linear" [id=26, scope="LeNet/NNCFLinear[fc2]", type=linear];
"27 LeNet/RELU" [id=27, scope=LeNet, type=RELU];
"28 LeNet/SymmetricQuantizer/symmetric_quantize" [id=28, scope="LeNet/SymmetricQuantizer", type=symmetric_quantize];
"29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=29, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"30 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=30, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"31 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=31, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"32 LeNet/NNCFLinear[fc3]/linear" [id=32, scope="LeNet/NNCFLinear[fc3]", type=linear];
"33 /nncf_model_output" [id=33, scope="", type=nncf_model_output];
"0 /nncf_model_input" -> "1 SymmetricQuantizer/symmetric_quantize";
"1 SymmetricQuantizer/symmetric_quantize" -> "5 LeNet/NNCFConv2d[conv1]/conv2d";
"2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "4 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"4 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "5 LeNet/NNCFConv2d[conv1]/conv2d";
"5 LeNet/NNCFConv2d[conv1]/conv2d" -> "6 LeNet/RELU";
"6 LeNet/RELU" -> "7 LeNet/SymmetricQuantizer/symmetric_quantize";
"7 LeNet/SymmetricQuantizer/symmetric_quantize" -> "8 LeNet/max_pool2d";
"8 LeNet/max_pool2d" -> "12 LeNet/NNCFConv2d[conv2]/conv2d";
"9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "11 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"11 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "12 LeNet/NNCFConv2d[conv2]/conv2d";
"12 LeNet/NNCFConv2d[conv2]/conv2d" -> "13 LeNet/RELU";
"13 LeNet/RELU" -> "14 LeNet/SymmetricQuantizer/symmetric_quantize";
"14 LeNet/SymmetricQuantizer/symmetric_quantize" -> "15 LeNet/max_pool2d";
"15 LeNet/max_pool2d" -> "16 LeNet/view";
"16 LeNet/view" -> "20 LeNet/NNCFLinear[fc1]/linear";
"17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "18 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"18 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "19 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"19 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "20 LeNet/NNCFLinear[fc1]/linear";
"20 LeNet/NNCFLinear[fc1]/linear" -> "21 LeNet/RELU";
"21 LeNet/RELU" -> "22 LeNet/SymmetricQuantizer/symmetric_quantize";
"22 LeNet/SymmetricQuantizer/symmetric_quantize" -> "26 LeNet/NNCFLinear[fc2]/linear";
"23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "24 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"24 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "25 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"25 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "26 LeNet/NNCFLinear[fc2]/linear";
"26 LeNet/NNCFLinear[fc2]/linear" -> "27 LeNet/RELU";
"27 LeNet/RELU" -> "28 LeNet/SymmetricQuantizer/symmetric_quantize";
"28 LeNet/SymmetricQuantizer/symmetric_quantize" -> "32 LeNet/NNCFLinear[fc3]/linear";
"29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "30 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"30 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "31 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"31 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "32 LeNet/NNCFLinear[fc3]/linear";
"32 LeNet/NNCFLinear[fc3]/linear" -> "33 /nncf_model_output";
}
